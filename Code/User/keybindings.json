// Place your key bindings in this file to override the defaults
[
  {
    "key": "alt+k",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+j",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus"
  },
  // Navigating splits and tabs
  {
    "key": "ctrl-h",
    "command": "workbench.action.navigateLeft"
  },
  {
    "key": "ctrl-l",
    "command": "workbench.action.navigateRight"
  },
  {
    "key": "ctrl-k",
    "command": "workbench.action.navigateUp"
  },
  {
    "key": "ctrl-j",
    "command": "workbench.action.navigateDown"
  },
  {
    "key": "alt+i", // increase size
    "command": "workbench.action.increaseViewSize"
  },
  {
    "key": "alt+d", // decrease size
    "command": "workbench.action.decreaseViewSize"
  },
  // Navigating splits and tabs
  {
    "key": "alt+n",
    "command": "editor.action.triggerSuggest",
    //"when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  // Selecting from suggestions instead of arrow keys
  {
    "key": "alt+.",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "alt+,",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "alt+.",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inCommandPalette || inQuickOpen || codeActionMenuVisible"
  },
  {
    "key": "alt+,",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inCommandPalette || inQuickOpen || codeActionMenuVisible"
  },
  // Selecting from suggestions instead of arrow keys
  // File Tree navigation
  {
    "key": "shift+n",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus && !editorFocus && !inputFocus"
  },
  {
    "key": "n",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !editorFocus && !inputFocus"
  },
  {
    "key": "d",
    "command": "deleteFile",
    "when": "filesExplorerFocus && foldersViewVisible && !inputFocus"
  },
  {
    "key": "q",
    "command": "runCommands",
    "when": "filesExplorerFocus && !inputFocus && !inputBoxFocus",
    "args": {
      "commands": [
        "workbench.action.focusActiveEditorGroup",
        "workbench.action.closeSidebar"
      ]
    }
  },
  {
    "key": "/",
    "command": "list.find",
    "when": "filesExplorerFocus"
  },
  {
    "key": "r",
    "command": "renameFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "c",
    "command": "filesExplorer.copy",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "x",
    "command": "filesExplorer.cut",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  // File Tree Navigation
  {
    "key": "alt+t",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "space s p",
    "command": "workbench.profiles.actions.switchProfile",
    "when": "vim.mode == 'Normal' && editorTextFocus && !editorReadonly"
  },
  //Git
  {
    "key": "ctrl+-", // [G]o [G]it
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.view.scm",
        "workbench.scm.focus",
      ]
    },
  },
  {
    "key": "space g g", // [G]o [G]it
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.view.scm",
        "workbench.scm.focus"
      ]
    },
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  //Git
  {
    "key": "alt+h",
    "command": "toggleSuggestionDetails",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "space g p", // Prev diagnostics
    "command": "editor.action.marker.prev",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    "key": "space g n", // Next diagnostics
    "command": "editor.action.marker.next",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    "key": "space f f", // [F]ind [F]ile
    "command": "workbench.action.quickOpen",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "space g b", // [G]o [B]ack
    "command": "workbench.action.navigateBack",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "space g f", // [G]o [F]orward
    "command": "workbench.action.navigateForward",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "space f d", // [F]ormat [D]ocument
    "command": "editor.action.formatDocument",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "space c t", // [C]lose [T]ab
    "command": "workbench.action.closeActiveEditor",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "space g h", // [G]lance [H]over
    "command": "editor.action.showHover",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "space g d", // [G]oto [D]eclaration
    "command": "editor.action.goToDeclaration",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "space g r", // [G]oto [R]eferences
    "command": "editor.action.goToReferences",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "space g i", // [G]oto [I]mplementation
    "command": "editor.action.goToImplementation",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "space e s", // [E]ditor [S]ymbols
    "command": "workbench.action.gotoSymbol",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "space w s", // [W]orkbench [S]ymbols
    "command": "workbench.action.showAllSymbols",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "space f c", // [F]old [C]ode
    "command": "editor.fold",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "key": "space s v", // [S]plit [V]ertical
    "command": "workbench.action.splitEditor",
    "when": "(editorTextFocus || !inputFocus) && vim.mode == 'Normal'"
  },
  {
    "key": "space s d", // [S]plit [V]ertical
    "command": "workbench.action.splitEditorDown",
    "when": "(editorTextFocus || !inputFocus) && vim.mode == 'Normal'"
  },
  {
    "key": "space s c", // [S]how [C]ommands
    "command": "workbench.action.showCommands",
    "when": "(editorTextFocus || !inputFocus) && vim.mode == 'Normal'"
  },
  {
    "key": "alt+o", // [R]ecent [F]olders
    "command": "workbench.action.openRecent",
    //"when": "(editorTextFocus || !inputFocus) && vim.mode == 'Normal'"
  },
  {
    "key": "space t s", // [T]oggle [S]idebar
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "(editorTextFocus || !inputFocus) && vim.mode == 'Normal'"
  },
  {
    "key": "alt+f", // [F]iles
    "command": "workbench.view.explorer",
  },
  {
    "key": "alt+s", // [S]earch
    "command": "workbench.action.findInFiles",
  },
  {
    "key": "space n t", // [N]erd [T]ree
    "command": "workbench.view.explorer",
    "when": "(editorTextFocus || !inputFocus) && vim.mode == 'Normal'"
  },
  {
    "key": "space c s", // [C]lose [S]plit
    "command": "workbench.action.closeEditorsInGroup",
    "when": "(editorTextFocus || !inputFocus) && vim.mode == 'Normal'"
  },
  {
    "key": "space e r", // [E]lement [R]ename
    "command": "editor.action.rename",
    "when": "vim.mode == 'Normal' && editorHasRenameProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+z",
    "command": "workbench.action.toggleZenMode",
  },
  {
    "key": "space f q",
    "command": "editor.action.quickFix",
    "when": "(editorTextFocus || !inputFocus) && vim.mode == 'Normal'"
    //"when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
  },
]