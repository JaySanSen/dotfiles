" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5
" set showmode
" set showcmd
" Set relative numbers for easier navigation
set rnu
inoremap <A-;> <Esc>
vnoremap <A-;> <Esc>
inoremap jk <Esc>
" map the leader key <leader>
let mapleader = ' '
" noremap <leader>cc :edit ~/.ideavimrc<cr>

" Rename Element
map <leader>er <Action>(RenameElement)
" Rename File
map <leader>fr <Action>(RenameFile)
" Go back to place where we came from
map <leader>gb <Action>(Back)
" Find class
map <leader>gc <Action>(GotoClass)
" Find file
map <leader>gf <Action>(GotoFile)
" Find symbol
map <leader>gs <Action>(GotoSymbol)
" Find action
map <leader>ga <Action>(GotoAction)
" Go to declaration
map <leader>gd <Action>(GotoDeclaration)
" Go to type declaration
map <leader>gt <Action>(GotoTypeDeclaration)
" Go to implementation. If a base class is being implemented by several other class this will go to the implementation
map <leader>gi <Action>(GotoImplementation)
" Go to test case implementation and come back to class
map <leader>gtc <Action>(GotoTest)
" Go to super method or parent
" map <leader>gsm <Action>(GotoSuperMethod)
" Go to line but this can be achieved using Vim :linenumber and enter like :25 or use linenumberG like 25G
" map <leader>gl <Action>(GotoLine)

" Open Terminal
map <leader>t <Action>(ActivateTerminalToolWindow)

" Close Active Tab
map <leader>ct <Action>(CloseEditor)

" Find all the places where it is used. To close the panel it opens use shift + esc
map <leader>fu <Action>(FindUsages)
map <leader>su <Action>(ShowUsages)
map <leader>vs <Action>(ViewSource)
map <leader>qi <Action>(QuickImplementations)
map <leader>qt <Action>(QuickTypeDefinition)
map <leader>et <Action>(ExpressionTypeInfo)
map <leader>gh <Action>(ShowHoverInfo)
map <leader>oo <Action>(FileStructurePopup)


map <leader>mj <Action>(MoveLineDown)
map <leader>mk <Action>(MoveLineUp)

" inoremap <C-k> <Up>
" inoremap <C-j> <Down>

" Do incremental searching.
set incsearch
" This will highlight the searched text. To undo highlight do :nohlsearch or :nohl
set hlsearch
" case insensitive search
set ignorecase
" To perform case sensitive search when one letter is capitalized. For example searching for action will show both Action and action but search for Action will only show Action since A is capitalized
set smartcase
" clear text highlighted due to search
map <leader>nhl :nohlsearch<Cr>


" Make use of the system clipboard for copy pasting from and to other applications
" sync vim clipboard with OS clipboard
set clipboard^=unnamedplus,unnamed

" Not sure about this but stole it from some configuration
set history=1000

" This will remove the sounds when cursor hits the top or bottom of file while scrolling
set visualbell
set noerrorbells

" This will highlight selection when yank commands are executed
set highlightedyank
let g:highlightedyank_highlight_duration = 150
let g:highlightedyank_highlight_color = "rgba(133,165,214,255)"

" let g:highlightedyank_highlight_foreground_color = "rgba(0, 0, 0, 255)"

" jump between angle brackets with % just like how we jump to other bracket pairs
set matchpairs+=<:>

" smart join functionality
" set ideajoin

" Don't use Ex mode, use Q for formatting.
map Q gq

" To redo an action we need to press control + r, remapping this to U and u is undo
noremap U <C-r>

" Black whole register. This makes it so that when you press \ and then delete or perform an action like dd or dw,
" it will not save that in the regular buffer so you don't need to go back and copy the text again.
noremap \ "_


" paste without overwriting current buffer. If you select something and paste over it, it will replace the selected
" text however it will also copy the old text to the buffer so when you paste again it will be the old text. This
" keymap will avoid that
xnoremap p P


" Splits and unsplit
map <leader>sh <Action>(SplitHorizontally)
map <leader>sv <Action>(SplitVertically)
map <leader>us <Action>(Unsplit)
" map <leader>usa <Action>(UnsplitAll)

" Navigate between splits using home row hjkl and alt key. Alt l will move to right split. Alt k to up etc
map <A-h> <C-w>h
map <A-i> <C-w>j
map <A-k> <C-w>k
map <A-l> <C-w>l

" Enable temporary word wrap. Press again to remove word wrap
map <leader>ww <Action>(EditorToggleUseSoftWraps)


set NERDTree
map <leader>nt :NERDTree<CR>
" o 	Open files, directories and bookmarks 	g:NERDTreeMapActivateNode
" go 	Open selected file, but leave cursor in the NERDTree 	g:NERDTreeMapPreview
" t 	Open selected node/bookmark in a new tab 	g:NERDTreeMapOpenInTab
" T 	Same as 't' but keep the focus on the current tab 	g:NERDTreeMapOpenInTabSilent
" i 	Open selected file in a split window 	g:NERDTreeMapOpenSplit gi 	Same as i, but leave the cursor on the NERDTree 	g:NERDTreeMapPreviewSplit
" s 	Open selected file in a new vsplit 	g:NERDTreeMapOpenVSplit
" gs 	Same as s, but leave the cursor on the NERDTree 	g:NERDTreeMapPreviewVSplit
" O 	Recursively open the selected directory 	g:NERDTreeMapOpenRecursively
" x 	Close the current nodes parent 	g:NERDTreeMapCloseDir
" X 	Recursively close all children of the current node 	g:NERDTreeMapCloseChildren
" P 	Jump to the root node 	g:NERDTreeMapJumpRoot
" p 	Jump to current nodes parent 	g:NERDTreeMapJumpParent
" K 	Jump up inside directories at the current tree depth 	g:NERDTreeMapJumpFirstChild
" J 	Jump down inside directories at the current tree depth 	g:NERDTreeMapJumpLastChild
" <C-J> 	Jump down to next sibling of the current directory 	g:NERDTreeMapJumpNextSibling
" <C-K> 	Jump up to previous sibling of the current directory 	g:NERDTreeMapJumpPrevSibling
" r 	Recursively refresh the current directory 	g:NERDTreeMapRefresh
" R 	Recursively refresh the current root 	g:NERDTreeMapRefreshRoot
" m 	Display the NERDTree menu 	g:NERDTreeMapMenu
" q 	Close the NERDTree window 	g:NERDTreeMapQuit
" A 	Zoom (maximize/minimize) the NERDTree window 	g:NERDTreeMapToggleZoom
" d 	Delete file or directory 	g:NERDTreeMapDelete
" n 	Create File 	g:NERDTreeMapNewFile
" N 	Create Directory 	g:NERDTreeMapNewDir

" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins

" Highlight copied text
" Plug 'machakann/vim-highlightedyank'
" Commentary plugin
" Plug 'tpope/vim-commentary'

"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
"map \r <Action>(ReformatCode)

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)
" How do I map this to Ctrl J / Ctrl K for moving up and down between code selection? Couldn't find any Action Ids for this one
" This can be done in the default settings (outside your rc file). Go to settings > Keymap. Other > List Actions > Select Next Row. Add shortcut there.
" More generally, it is also possible to map Up/Down/Left/Right to Ctrl-[hjkl]. In Keymap: Editor Actions > Down. Using this, you can use Ctrl j/k to walk trough other lists as well. Like for instance the project explorer or a search menu.
" Try this in your .ideavimrc file:
" inoremap <c-k> <Up>
" inoremap <c-j> <Down>
" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

"" -- Suggested options --
